#! /usr/bin/env python3
import os
import numpy
from scipy.interpolate import PchipInterpolator


# CSMS cross-section
#
# Reference:
#    https://arxiv.org/abs/1106.3723
#
cs0 = numpy.array((
    (50, 0.32, 4.1, -2.3, -2.4, 0.10, 3.8, -1.9, -2.0),
    (100, 0.65, 3.8, -2.0, -2.0, 0.20, 3.5, -1.8, -1.8),
    (200, 1.3, 3.5, -1.8, -1.9, 0.41, 3.2, -1.6, -1.7),
    (500, 3.2, 3.2, -1.7, -1.8, 1.0, 2.9, -1.5, -1.5),
    (1000, 6.2, 3.0, -1.6, -1.7, 2.0, 2.7, -1.4, -1.5),
    (2000, 12., 2.7, -1.6, -1.6, 3.8, 2.4, -1.3, -1.4),
    (5000, 27., 2.3, -1.5, -1.5, 8.6, 2.1, -1.3, -1.3),
    (10000, 47., 2.0, -1.4, -1.4, 15., 1.8, -1.2, -1.2),
    (20000, 77., 1.8, -1.3, -1.4, 26., 1.6, -1.1, -1.1),
    (50000, 140., 1.5, -1.2, -1.2, 49., 1.3, -1.0, -1.1),
    (100000, 210., 1.4, -1.2, -1.2, 75., 1.2, -1.0, -1.0),
    (200000, 310., 1.5, -1.1, -1.1, 110., 1.2, -0.9, -0.9),
    (500000, 490., 1.6, -1.0, -1.0, 180., 1.3, -0.8, -0.8),
    (1E+06, 690., 1.7, -0.9, -0.9, 260., 1.4, -0.8, -0.8),
    (2E+06, 950., 1.9, -0.9, -0.9, 360., 1.6, -0.8, -0.8),
    (5E+06, 1400., 2.0, -0.9, -0.9, 540., 1.8, -0.8, -0.8),
    (1E+07, 1900., 2.2, -0.9, -0.9, 730., 2.0, -0.8, -0.8),
    (2E+07, 2600., 2.3, -0.9, -1.0, 980., 2.2, -0.8, -0.9),
    (5E+07, 3700., 2.5, -0.9, -1.2, 1400., 2.4, -0.9, -1.1),
    (1E+08, 4800., 2.7, -0.9, -1.5, 1900., 2.6, -0.9, -1.3),
    (2E+08, 6200., 2.8, -1.0, -2.0, 2400., 2.7, -1.0, -1.8),
    (5E+08, 8700., 3.0, -1.1, -3.0, 3400., 2.9, -1.0, -2.6),
    (1E+09, 11000., 3.1, -1.2, -3.9, 4400., 3.0, -1.1, -3.4),
    (2E+09, 14000., 3.3, -1.2, -5.0, 5600., 3.2, -1.2, -4.4),
    (5E+09, 19000., 3.4, -1.4, -6.8, 7600., 3.4, -1.3, -6.1),
    (1E+10, 24000., 3.6, -1.5, -8.5, 9600., 3.5, -1.4, -7.6),
    (2E+10, 30000., 3.7, -1.6, -10.3, 12000., 3.6, -1.5, -9.3),
    (5E+10, 39000., 3.8, -1.7, -13.1, 16000., 3.8, -1.7, -11.8),
    (1E+11, 48000., 4.0, -1.8, -15.2, 20000., 3.9, -1.8, -13.9),
    (2E+11, 59000., 4.1, -1.9, -17.5, 24000., 4.0, -1.9, -16.1),
    (5E+11, 75000., 4.2, -2.0, -20.3, 31000., 4.2, -2.0, -18.8)
))

cs1 = numpy.array((
    (50, 0.15, 15.0, -9.0, -9.0, 0.05, 12.0, -6.4, -6.4),
    (100, 0.33, 13.3, -7.4, -7.4, 0.12, 10.7, -5.7, -5.7),
    (200, 0.69, 11.9, -6.5, -6.5, 0.24, 9.6, -5.1, -5.1),
    (500, 1.8, 10.5, -5.7, -5.7, 0.61, 8.6, -4.6, -4.6),
    (1000, 3.6, 9.4, -5.2, -5.2, 1.20, 7.8, -4.2, -4.2),
    (2000, 7., 8.3, -4.6, -4.6, 2.4, 7.0, -3.8, -3.8),
    (5000, 17., 6.5, -3.7, -3.7, 5.8, 5.7, -3.2, -3.2),
    (10000, 31., 5.1, -3.0, -3.0, 11., 4.6, -2.7, -2.7),
    (20000, 55., 3.8, -2.3, -2.3, 19., 3.6, -2.1, -2.1),
    (50000, 110., 2.5, -1.7, -1.7, 39., 2.4, -1.5, -1.5),
    (100000, 180., 1.9, -1.4, -1.4, 64., 1.7, -1.2, -1.2),
    (200000, 270., 1.7, -1.2, -1.2, 99., 1.4, -1.0, -1.0),
    (500000, 460., 1.7, -1.1, -1.1, 170., 1.4, -0.9, -0.9),
    (1E+06, 660., 1.8, -1.0, -1.0, 240., 1.5, -0.8, -0.8),
    (2E+06, 920., 1.9, -1.0, -1.0, 350., 1.6, -0.8, -0.8),
    (5E+06, 1400., 2.1, -0.9, -0.9, 530., 1.9, -0.8, -0.8),
    (1E+07, 1900., 2.2, -0.9, -0.9, 730., 2.0, -0.8, -0.8),
    (2E+07, 2500., 2.3, -0.9, -1.0, 980., 2.2, -0.8, -0.9),
    (5E+07, 3700., 2.5, -0.9, -1.2, 1400., 2.4, -0.9, -1.1),
    (1E+08, 4800., 2.7, -1.0, -1.5, 1900., 2.6, -0.9, -1.3),
    (2E+08, 6200., 2.8, -1.0, -2.0, 2400., 2.7, -1.0, -1.8),
    (5E+08, 8700., 3.0, -1.1, -3.0, 3400., 2.9, -1.0, -2.6),
    (1E+09, 11000., 3.1, -1.2, -3.9, 4400., 3.0, -1.1, -3.4),
    (2E+09, 14000., 3.3, -1.2, -5.0, 5600., 3.2, -1.2, -4.4),
    (5E+09, 19000., 3.4, -1.4, -6.8, 7600., 3.4, -1.3, -6.1),
    (1E+10, 24000., 3.6, -1.5, -8.5, 9600., 3.5, -1.4, -7.6),
    (2E+10, 30000., 3.7, -1.6, -10.3, 12000., 3.6, -1.5, -9.3),
    (5E+10, 39000., 3.8, -1.7, -13.1, 16000., 3.8, -1.7, -11.8),
    (1E+11, 48000., 4.0, -1.8, -15.2, 20000., 3.9, -1.8, -13.9),
    (2E+11, 59000., 4.1, -1.9, -17.5, 24000., 4.0, -1.9, -16.1),
    (5E+11, 75000., 4.2, -2.0, -20.3, 31000., 4.2, -2.0, -18.8)
))


# Interpolate using PCHIP algorithm
p00 = PchipInterpolator(x=numpy.log(cs0[:,0]), y=numpy.log(cs0[:,1]))
p01 = PchipInterpolator(x=numpy.log(cs0[:,0]), y=numpy.log(cs0[:,5]))
p10 = PchipInterpolator(x=numpy.log(cs1[:,0]), y=numpy.log(cs1[:,1]))
p11 = PchipInterpolator(x=numpy.log(cs1[:,0]), y=numpy.log(cs1[:,5]))


# Build the table for ENT
with open('share/cs/CSMS.txt', 'w+') as f:
    f.write('''# CSMS cross-section
#
# Reference:
#    https://arxiv.org/abs/1106.3723
#
#------------------------------------------------------------------------------------------------------------
#  energy                 neutrino xsec (m^2)                            anti-neutrino xsec (m^2)
#  (GeV)         charged-current        neutral-current           charged-current        neutral-current
#              proton      neutron     proton      neutron      proton      neutron     proton      neutron
#------------------------------------------------------------------------------------------------------------
''')
    energies = numpy.logspace(2, 12, 201)
    pb = 1E-40 # pb -> m^2
    fmt = ' '.join(4 * ('{:.5E}',))
    fmt = '  '.join(('{:.5E}', fmt, fmt)) + os.linesep
    for i, energy in enumerate(energies):
        c00 = numpy.exp(p00(numpy.log(energy))) * pb
        c01 = numpy.exp(p01(numpy.log(energy))) * pb
        c10 = numpy.exp(p10(numpy.log(energy))) * pb
        c11 = numpy.exp(p11(numpy.log(energy))) * pb
        f.write(fmt.format(energy, c00, c00, c01, c01, c10, c10, c11, c11))
