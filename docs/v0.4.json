{"files":[{"file":"ent.h","functions":["ent_function_t","ent_handler_cb","ent_density_cb","ent_medium_cb","ent_random_cb","ent_ancestor_cb","ent_physics_create","ent_physics_destroy","ent_physics_cross_section","ent_physics_dcs","ent_physics_pdf","ent_vertex","ent_transport","ent_error_string","ent_error_function","ent_error_print","ent_error_handler_set","ent_error_handler_get"],"meta":{},"lines":542}],"functions":{"ent_physics_create":{"type":"function","file":"ent.h","line":325,"lineto":326,"args":[{"name":"physics","type":"struct ent_physics **","comment":"A handle for the Physics environment.\n"},{"name":"pdf","type":"const char *","comment":"The PDF file(s) to create the set from.\n"}],"argline":"struct ent_physics **physics, const char *pdf","sig":"struct ent_physics **::const char *","return":{"type":"enum ent_return","comment":"On success <code>ENT_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Create a new Physics environment.</p>\n","comments":"<p>Create a new Physics environment conforming to the Standard Model of Particle Physics and according to the given tabulations of Parton Distribution Functions (PDF).</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> ENT_RETURN_FORMAT_ERROR    The pdf file format is not valid / supported.\n\n ENT_RETURN_MEMORY_ERROR    Couldn&#39;t allocate memory.\n\n ENT_RETURN_PATH_ERROR      The pdf file couldn&#39;t be found/opened.\n</code></pre>\n","group":"physics"},"ent_physics_destroy":{"type":"function","file":"ent.h","line":335,"lineto":335,"args":[{"name":"physics","type":"struct ent_physics **","comment":"A handle for the Physics.\n"}],"argline":"struct ent_physics **physics","sig":"struct ent_physics **","return":{"type":"void","comment":null},"description":"<p>Destroy a Physics environment.</p>\n","comments":"<p>Release the allocated memory. On exit <em>physics</em> is set to <code>NULL</code>.</p>\n","group":"physics"},"ent_physics_cross_section":{"type":"function","file":"ent.h","line":358,"lineto":360,"args":[{"name":"physics","type":"struct ent_physics *","comment":"A handle for the Physics.\n"},{"name":"projectile","type":"enum ent_pid","comment":"The incoming projectile.\n"},{"name":"energy","type":"double","comment":"The projectile total energy.\n"},{"name":"Z","type":"double","comment":"The target charge number.\n"},{"name":"A","type":"double","comment":"The target atomic mass number.\n"},{"name":"process","type":"enum ent_process","comment":"The interaction process.\n"},{"name":"cross_section","type":"double *","comment":"The coresponding DCS value.\n"}],"argline":"struct ent_physics *physics, enum ent_pid projectile, double energy, double Z, double A, enum ent_process process, double *cross_section","sig":"struct ent_physics *::enum ent_pid::double::double::double::enum ent_process::double *","return":{"type":"enum ent_return","comment":"On success <code>ENT_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>The total or process specific cross-section.</p>\n","comments":"<p>Compute the cross-secction for the given projectile incoming on a target (Z, A). Set <em>process</em> to <code>ENT_PROCESS_NONE</code> in order to Compute the total cross-section.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> ENT_RETURN_DOMAIN_ERROR     Some input parameter is invalid.\n</code></pre>\n","group":"physics"},"ent_physics_dcs":{"type":"function","file":"ent.h","line":385,"lineto":387,"args":[{"name":"physics","type":"struct ent_physics *","comment":"A handle for the Physics.\n"},{"name":"projectile","type":"enum ent_pid","comment":"The incoming projectile.\n"},{"name":"energy","type":"double","comment":"The projectile total energy.\n"},{"name":"Z","type":"double","comment":"The target charge number.\n"},{"name":"A","type":"double","comment":"The target atomic mass number.\n"},{"name":"process","type":"enum ent_process","comment":"The interaction process.\n"},{"name":"x","type":"double","comment":"The Bjorken <em>x</em> fraction.\n"},{"name":"y","type":"double","comment":"The energy loss fraction.\n"},{"name":"dcs","type":"double *","comment":"The coresponding DCS value.\n"}],"argline":"struct ent_physics *physics, enum ent_pid projectile, double energy, double Z, double A, enum ent_process process, double x, double y, double *dcs","sig":"struct ent_physics *::enum ent_pid::double::double::double::enum ent_process::double::double::double *","return":{"type":"enum ent_return","comment":"On success <code>ENT_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Compute a DCS.</p>\n","comments":"<p>Compute the Differential Cross-Section (DCS) in the Laboratory frame for the given projectile incoming on a target (Z, A) at rest. For an isoscalar nucleon set <code>Z = 0.5</code> and <code>A = 1</code>.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> ENT_RETURN_DOMAIN_ERROR     Some input parameter is invalid.\n</code></pre>\n","group":"physics"},"ent_physics_pdf":{"type":"function","file":"ent.h","line":407,"lineto":408,"args":[{"name":"physics","type":"struct ent_physics *","comment":"A handle for the Physics.\n"},{"name":"parton","type":"enum ent_parton","comment":"The parton of interest.\n"},{"name":"x","type":"double","comment":"The Bjorken <em>x</em> fraction.\n"},{"name":"q2","type":"double","comment":"The squared momentum transfer.\n"},{"name":"value","type":"double *","comment":null}],"argline":"struct ent_physics *physics, enum ent_parton parton, double x, double q2, double *value","sig":"struct ent_physics *::enum ent_parton::double::double::double *","return":{"type":"enum ent_return","comment":"On success <code>ENT_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Compute a PDF.</p>\n","comments":"<p>Compute the Parton Distribution Function (PDF) for the given <em>parton</em> and kinematic parameters.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> ENT_RETURN_DOMAIN_ERROR     Some input parameter is invalid.\n</code></pre>\n","group":"physics"},"ent_vertex":{"type":"function","file":"ent.h","line":451,"lineto":454,"args":[{"name":"physics","type":"struct ent_physics *","comment":"A handle for the Physics.\n"},{"name":"context","type":"struct ent_context *","comment":"The Monte-Carlo simulation context.\n"},{"name":"state","type":"struct ent_state *","comment":"The initial / final state of the tracked particle.\n"},{"name":"medium","type":"struct ent_medium *","comment":"The target medium.\n"},{"name":"process","type":"enum ent_process","comment":"The interaction process, if specified.\n"},{"name":"product","type":"struct ent_state *","comment":"Any additional interaction product, or <code>NULL</code> if not\n                   required.\n"}],"argline":"struct ent_physics *physics, struct ent_context *context, struct ent_state *state, struct ent_medium *medium, enum ent_process process, struct ent_state *product","sig":"struct ent_physics *::struct ent_context *::struct ent_state *::struct ent_medium *::enum ent_process::struct ent_state *","return":{"type":"enum ent_return","comment":"On success <code>ENT_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Perform a Monte-Carlo interaction.</p>\n","comments":"<p>Perform a Monte-Carlo interaction for the given projectile and target. If <em>process</em> is negative the interaction process is randomly selected according to the cross-sections of all possible processes.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> ENT_RETURN_DOMAIN_ERROR     Some input parameter is inconsistent.\n</code></pre>\n","group":"ent"},"ent_transport":{"type":"function","file":"ent.h","line":478,"lineto":480,"args":[{"name":"physics","type":"struct ent_physics *","comment":"A handle for the Physics or <code>NULL</code>.\n"},{"name":"context","type":"struct ent_context *","comment":"The Monte-Carlo simulation context.\n"},{"name":"state","type":"struct ent_state *","comment":"The initial / final state of the tracked particle.\n"},{"name":"product","type":"struct ent_state *","comment":"Any additional interaction product, or <code>NULL</code> if not\n                   required.\n"},{"name":"event","type":"enum ent_event *","comment":"The event that ended the Monte-Carlo transport.\n"}],"argline":"struct ent_physics *physics, struct ent_context *context, struct ent_state *state, struct ent_state *product, enum ent_event *event","sig":"struct ent_physics *::struct ent_context *::struct ent_state *::struct ent_state *::enum ent_event *","return":{"type":"enum ent_return","comment":"On success <code>ENT_RETURN_SUCCESS</code> is returned otherwise an error\n code is returned as detailed below.\n"},"description":"<p>Perform a Monte-Carlo transport.</p>\n","comments":"<p>Transport the given particle in a medium. The Monte-Carlo transport ends whenever an interaction occurs, or the neutrino escapes, or a user specified limit is reached. Note that if <em>physics</em> is <code>NULL</code> neutrino interactions are disabled.</p>\n\n<p><strong>Error codes</strong></p>\n\n<pre><code> ENT_RETURN_DOMAIN_ERROR     Some input parameter is inconsistent or an inconsistent step value was returned.\n</code></pre>\n","group":"ent"},"ent_error_string":{"type":"function","file":"ent.h","line":491,"lineto":491,"args":[{"name":"code","type":"enum ent_return","comment":null}],"argline":"enum ent_return code","sig":"enum ent_return","return":{"type":"const char *","comment":"A static string.\n"},"description":"<p>Return a string describing a <code>ent_return</code> code.</p>\n","comments":"<p>This function is analog to the standard C <code>strerror</code> function but specific to ENT return codes. It is thread safe.</p>\n","group":"error"},"ent_error_function":{"type":"function","file":"ent.h","line":502,"lineto":502,"args":[{"name":"function","type":"ent_function_t *","comment":"The library function.\n"}],"argline":"ent_function_t *function","sig":"ent_function_t *","return":{"type":"const char *","comment":"a static string.\n"},"description":"<p>Return a string describing a ENT library function.</p>\n","comments":"<p>This function is meant for verbosing when handling errors. It is thread safe.</p>\n","group":"error"},"ent_error_print":{"type":"function","file":"ent.h","line":516,"lineto":517,"args":[{"name":"stream","type":"FILE *","comment":"The output stream where to print.\n"},{"name":"code","type":"enum ent_return","comment":"The <code>ent_return</code> error code.\n"},{"name":"function","type":"ent_function_t","comment":"The library calling function.\n"},{"name":"tabulation","type":"const char *","comment":"The tabulation separator or <code>NULL</code>.\n"},{"name":"newline","type":"const char *","comment":"The newline separator or <code>NULL</code>.\n"}],"argline":"FILE *stream, enum ent_return code, ent_function_t function, const char *tabulation, const char *newline","sig":"FILE *::enum ent_return::ent_function_t::const char *::const char *","return":{"type":"void","comment":null},"description":"<p>Print a formated summary of an error.</p>\n","comments":"<p>The output summary is formated in JSON. The <em>tabulation</em> and <em>newline</em> parameters allow to control the output&#39;s rendering.</p>\n","group":"error"},"ent_error_handler_set":{"type":"function","file":"ent.h","line":531,"lineto":531,"args":[{"name":"handler","type":"ent_handler_cb *","comment":"The error handler to set or <code>NULL</code>.\n"}],"argline":"ent_handler_cb *handler","sig":"ent_handler_cb *","return":{"type":"void","comment":null},"description":"<p>Set or clear the error handler.</p>\n","comments":"<p>Set the error handler callback for ENT library functions. If <em>handler</em> is set to <code>NULL</code> error callbacks are disabled.</p>\n\n<p><strong>Warnings</strong></p>\n\n<p>The error handler is thread local.</p>\n","group":"error"},"ent_error_handler_get":{"type":"function","file":"ent.h","line":542,"lineto":542,"args":[],"argline":"","sig":"","return":{"type":"ent_handler_cb *","comment":"The current error handler or <code>NULL</code> if none.\n"},"description":"<p>Get the current error handler.</p>\n","comments":"<p><strong>Warnings</strong></p>\n\n<p>The error handler is thread local.</p>\n","group":"error"}},"callbacks":{"ent_function_t":{"type":"callback","file":"ent.h","line":154,"lineto":154,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Generic function pointer.</p>\n","comments":"<p>This is a generic function pointer used to identify the library functions, e.g. for error handling.</p>\n"},"ent_handler_cb":{"type":"callback","file":"ent.h","line":165,"lineto":165,"args":[{"name":"code","type":"enum ent_return","comment":"The <code>ent_return</code> error code.\n"},{"name":"caller","type":"ent_function_t","comment":"The library calling function.\n"}],"argline":"enum ent_return code, ent_function_t caller","sig":"enum ent_return::ent_function_t","return":{"type":"void","comment":null},"description":"<p>Callback for error handling.</p>\n","comments":"<p>The user might provide its own error handler. It will be called at the return of any ENT library function providing an error code.</p>\n"},"ent_density_cb":{"type":"callback","file":"ent.h","line":190,"lineto":191,"args":[{"name":"medium","type":"struct ent_medium *","comment":"A related <code>ent_medium</code> or <code>NULL</code>.\n"},{"name":"state","type":"struct ent_state *","comment":"The state for which the <em>density</em> is requested.\n"},{"name":"density","type":"double *","comment":"The corresponding density value in kg/m<sup>3.</sup>\n"}],"argline":"struct ent_medium *medium, struct ent_state *state, double *density","sig":"struct ent_medium *::struct ent_state *::double *","return":{"type":"double","comment":"A proposed step limit distance, in m.\n"},"description":"<p>Density callback for a material medium.</p>\n","comments":"<p>The callback must return a proposed Monte-Carlo stepping distance, in m, consistent with the size of the propagation medium density inhomogeneities, e. g. 1 % of ρ / |∇ ρ|. Note that returning zero or less signs that the corresponding medium is uniform.</p>\n\n<p><strong>Warning</strong> : it is an error to return zero or less for any position of the medium if at least one area is not uniform.</p>\n"},"ent_medium_cb":{"type":"callback","file":"ent.h","line":225,"lineto":226,"args":[{"name":"context","type":"struct ent_context *","comment":"The Monte-Carlo context requiring a medium.\n"},{"name":"state","type":"struct ent_state *","comment":"The Monte-Carlo state for which the medium is requested.\n"},{"name":"medium","type":"struct ent_medium **","comment":"A pointer to the corresponding medium or <code>NULL</code> if the state\n has exit the simulation area.\n"}],"argline":"struct ent_context *context, struct ent_state *state, struct ent_medium **medium","sig":"struct ent_context *::struct ent_state *::struct ent_medium **","return":{"type":"double","comment":"The proposed step size or <code>0</code> for an infinite medium.\n"},"description":"<p>Medium callback for a Monte-Carlo state.</p>\n","comments":"<p>The callback must propose a Monte-Carlo stepping distance, in m, consistent with the geometry. Note that returning zero or less signs that the corresponding medium has no boundaries.</p>\n\n<p><strong>Warning</strong> : it is an error to return zero or less for any state if the initial medium is finite, i.e. returns a stricly positive step value.</p>\n"},"ent_random_cb":{"type":"callback","file":"ent.h","line":241,"lineto":241,"args":[{"name":"context","type":"struct ent_context *","comment":"The Monte-Carlo context requiring a random number.\n"}],"argline":"struct ent_context *context","sig":"struct ent_context *","return":{"type":"double","comment":"A uniform pseudo random number in [0;1].\n"},"description":"<p>Callback providing a stream of pseudo random numbers.</p>\n","comments":"<p><strong>Note</strong> : this is the only random stream used by ENT. The user must unsure proper behaviour, i.e. that a flat distribution in [0;1] is indeed returned.</p>\n\n<p><strong>Warning</strong> : if multiple contexts are used the user must ensure that this callback is thread safe, e.g. by using independant streams for each context or a locking mechanism in order to share a single random stream.</p>\n"},"ent_ancestor_cb":{"type":"callback","file":"ent.h","line":259,"lineto":260,"args":[{"name":"context","type":"struct ent_context *","comment":"The Monte-Carlo context requiring an ancestor.\n"},{"name":"ancestor","type":"enum ent_pid","comment":"The PID of the required ancestor.\n"},{"name":"daughter","type":"struct ent_state *","comment":"The daughter state.\n"}],"argline":"struct ent_context *context, enum ent_pid ancestor, struct ent_state *daughter","sig":"struct ent_context *::enum ent_pid::struct ent_state *","return":{"type":"double","comment":"The relative density of the ancestor.\n"},"description":"<p>Callback providing an a priori relative density of ancestors.</p>\n","comments":"<p>This callback <strong>must</strong> be provided for backward Monte-Carlo. It is expected to return an <em>a priori</em> density estimate for an ancestor at the daughter&#39;s location. Returning <code>0</code> or less indicates a null density, which disables the corresponding channel.</p>\n\n<p><strong>Warning</strong> : if multiple contexts are used the user must ensure that this callback is thread safe.</p>\n"}},"globals":{},"types":[["ent_context",{"decl":["ent_medium_cb * medium","ent_random_cb * random","ent_ancestor_cb * ancestor","double distance_max","double grammage_max"],"type":"struct","value":"ent_context","file":"ent.h","line":268,"lineto":279,"tdef":null,"description":" Data for a Monte-Carlo context.","comments":"<p>These are the data required by <em>ENT</em> for describing a Monte-Carlo context. The user might implement his own data structure on top of it.</p>\n","fields":[{"type":"ent_medium_cb *","name":"medium","comments":"The medium callback. \n"},{"type":"ent_random_cb *","name":"random","comments":"The random engine callback. \n"},{"type":"ent_ancestor_cb *","name":"ancestor","comments":"The ancestor callback, or <code>NULL</code> for forward Monte-Carlo. \n"},{"type":"double","name":"distance_max","comments":"A user supplied distance limit for the transport, or <code>0</code>. \n"},{"type":"double","name":"grammage_max","comments":"A user supplied grammage limit for the transport, or <code>0</code>. \n"}],"block":"ent_medium_cb * medium\nent_random_cb * random\nent_ancestor_cb * ancestor\ndouble distance_max\ndouble grammage_max","used":{"returns":[],"needs":["ent_ancestor_cb","ent_medium_cb","ent_random_cb","ent_transport","ent_vertex"]}}],["ent_event",{"decl":["ENT_EVENT_NONE","ENT_EVENT_DECAY_MUON","ENT_EVENT_DECAY_TAU","ENT_EVENT_EXIT","ENT_EVENT_LIMIT_DISTANCE","ENT_EVENT_LIMIT_GRAMMAGE","ENT_EVENT_INTERACTION"],"type":"enum","file":"ent.h","line":413,"lineto":428,"block":"ENT_EVENT_NONE\nENT_EVENT_DECAY_MUON\nENT_EVENT_DECAY_TAU\nENT_EVENT_EXIT\nENT_EVENT_LIMIT_DISTANCE\nENT_EVENT_LIMIT_GRAMMAGE\nENT_EVENT_INTERACTION","tdef":null,"description":" Exit events for a neutrino Monte-Carlo transport.","comments":"","fields":[{"type":"int","name":"ENT_EVENT_NONE","comments":"<p>No event, e.g. exit when an error occured. </p>\n","value":0},{"type":"int","name":"ENT_EVENT_DECAY_MUON","comments":"<p>The neutrino has triggered a backward decay from a muon. </p>\n","value":1},{"type":"int","name":"ENT_EVENT_DECAY_TAU","comments":"<p>The neutrino has triggered a backward decay from a tau. </p>\n","value":2},{"type":"int","name":"ENT_EVENT_EXIT","comments":"<p>The neutrino has exit the simulation area. </p>\n","value":3},{"type":"int","name":"ENT_EVENT_LIMIT_DISTANCE","comments":"<p>The neutrino travelled distance has reached a user limit. </p>\n","value":4},{"type":"int","name":"ENT_EVENT_LIMIT_GRAMMAGE","comments":"<p>The neutrino travelled grammage has reached a user limit. </p>\n","value":5},{"type":"int","name":"ENT_EVENT_INTERACTION","comments":"<p>The neutrino has interacted. </p>\n","value":6}],"used":{"returns":[],"needs":["ent_transport"]}}],["ent_medium",{"decl":["double Z","double A","ent_density_cb * density"],"type":"struct","value":"ent_medium","file":"ent.h","line":199,"lineto":206,"tdef":null,"description":" Data for describing a propagation medium.","comments":"<p>These are the data required by <em>ENT</em> for describing a propagation medium. The user might implement his own data structure on top of it.</p>\n","fields":[{"type":"double","name":"Z","comments":"The effective charge number of the medium&#39;s material. \n"},{"type":"double","name":"A","comments":"The effective mass number of the medium&#39;s material. \n"},{"type":"ent_density_cb *","name":"density","comments":"The medium density callback. \n"}],"block":"double Z\ndouble A\nent_density_cb * density","used":{"returns":[],"needs":["ent_density_cb","ent_medium_cb","ent_vertex"]}}],["ent_parton",{"decl":["ENT_PARTON_T_BAR","ENT_PARTON_B_BAR","ENT_PARTON_C_BAR","ENT_PARTON_S_BAR","ENT_PARTON_U_BAR","ENT_PARTON_D_BAR","ENT_PARTON_GLUON","ENT_PARTON_D","ENT_PARTON_U","ENT_PARTON_S","ENT_PARTON_C","ENT_PARTON_B","ENT_PARTON_T","ENT_N_PARTONS"],"type":"enum","file":"ent.h","line":117,"lineto":146,"block":"ENT_PARTON_T_BAR\nENT_PARTON_B_BAR\nENT_PARTON_C_BAR\nENT_PARTON_S_BAR\nENT_PARTON_U_BAR\nENT_PARTON_D_BAR\nENT_PARTON_GLUON\nENT_PARTON_D\nENT_PARTON_U\nENT_PARTON_S\nENT_PARTON_C\nENT_PARTON_B\nENT_PARTON_T\nENT_N_PARTONS","tdef":null,"description":"  Parton codes.","comments":"","fields":[{"type":"int","name":"ENT_PARTON_T_BAR","comments":"<p>The top anti-quark. </p>\n","value":-6},{"type":"int","name":"ENT_PARTON_B_BAR","comments":"<p>The beauty anti-quark. </p>\n","value":-5},{"type":"int","name":"ENT_PARTON_C_BAR","comments":"<p>The charm anti-quark. </p>\n","value":-4},{"type":"int","name":"ENT_PARTON_S_BAR","comments":"<p>The strange anti-quark. </p>\n","value":-3},{"type":"int","name":"ENT_PARTON_U_BAR","comments":"<p>The up anti-quark. </p>\n","value":-2},{"type":"int","name":"ENT_PARTON_D_BAR","comments":"<p>The down anti-quark </p>\n","value":-1},{"type":"int","name":"ENT_PARTON_GLUON","comments":"<p>The gluon. </p>\n","value":0},{"type":"int","name":"ENT_PARTON_D","comments":"<p>The down quark. </p>\n","value":1},{"type":"int","name":"ENT_PARTON_U","comments":"<p>The up quark </p>\n","value":2},{"type":"int","name":"ENT_PARTON_S","comments":"<p>The strange quark. </p>\n","value":3},{"type":"int","name":"ENT_PARTON_C","comments":"<p>The charm quark. </p>\n","value":4},{"type":"int","name":"ENT_PARTON_B","comments":"<p>The beauty quark. </p>\n","value":5},{"type":"int","name":"ENT_PARTON_T","comments":"<p>The top quark. </p>\n","value":6},{"type":"int","name":"ENT_N_PARTONS","comments":"<p>The top quark. </p>\n","value":13}],"used":{"returns":[],"needs":["ent_physics_pdf"]}}],["ent_physics",{"decl":[],"type":"struct","value":"ent_physics","file":"ent.h","line":170,"lineto":170,"tdef":null,"description":" Opaque structure for handling neutrinos DCS data.","comments":"","fields":[],"used":{"returns":[],"needs":["ent_physics_create","ent_physics_cross_section","ent_physics_dcs","ent_physics_destroy","ent_physics_pdf","ent_transport","ent_vertex"]}}],["ent_pid",{"decl":["ENT_PID_NU_BAR_TAU","ENT_PID_TAU_BAR","ENT_PID_NU_BAR_MU","ENT_PID_MUON_BAR","ENT_PID_NU_BAR_E","ENT_PID_POSITRON","ENT_PID_NONE","ENT_PID_ELECTRON","ENT_PID_NU_E","ENT_PID_MUON","ENT_PID_NU_MU","ENT_PID_TAU","ENT_PID_NU_TAU","ENT_PID_HADRON","ENT_PID_NEUTRON","ENT_PID_PROTON"],"type":"enum","file":"ent.h","line":57,"lineto":90,"block":"ENT_PID_NU_BAR_TAU\nENT_PID_TAU_BAR\nENT_PID_NU_BAR_MU\nENT_PID_MUON_BAR\nENT_PID_NU_BAR_E\nENT_PID_POSITRON\nENT_PID_NONE\nENT_PID_ELECTRON\nENT_PID_NU_E\nENT_PID_MUON\nENT_PID_NU_MU\nENT_PID_TAU\nENT_PID_NU_TAU\nENT_PID_HADRON\nENT_PID_NEUTRON\nENT_PID_PROTON","tdef":null,"description":"  Particles ID's, following the PDG numbering scheme.","comments":"","fields":[{"type":"int","name":"ENT_PID_NU_BAR_TAU","comments":"<p>The tau anti-neutrino. </p>\n","value":-16},{"type":"int","name":"ENT_PID_TAU_BAR","comments":"<p>The anti-tau. </p>\n","value":-15},{"type":"int","name":"ENT_PID_NU_BAR_MU","comments":"<p>The muon anti-neutrino. </p>\n","value":-14},{"type":"int","name":"ENT_PID_MUON_BAR","comments":"<p>The anti-muon. </p>\n","value":-13},{"type":"int","name":"ENT_PID_NU_BAR_E","comments":"<p>The electron anti-neutrino. </p>\n","value":-12},{"type":"int","name":"ENT_PID_POSITRON","comments":"<p>The positron. </p>\n","value":-11},{"type":"int","name":"ENT_PID_NONE","comments":"<p>Tag for none product. </p>\n","value":0},{"type":"int","name":"ENT_PID_ELECTRON","comments":"<p>The electron. </p>\n","value":11},{"type":"int","name":"ENT_PID_NU_E","comments":"<p>The electron neutrino. </p>\n","value":12},{"type":"int","name":"ENT_PID_MUON","comments":"<p>The muon. </p>\n","value":13},{"type":"int","name":"ENT_PID_NU_MU","comments":"<p>The muon neutrino. </p>\n","value":14},{"type":"int","name":"ENT_PID_TAU","comments":"<p>The tau. </p>\n","value":15},{"type":"int","name":"ENT_PID_NU_TAU","comments":"<p>The tau neutrino. </p>\n","value":16},{"type":"int","name":"ENT_PID_HADRON","comments":"<p>An unspecified hadron. </p>\n","value":100},{"type":"int","name":"ENT_PID_NEUTRON","comments":"<p>A neutron. </p>\n","value":2112},{"type":"int","name":"ENT_PID_PROTON","comments":"<p>A proton. </p>\n","value":2212}],"used":{"returns":[],"needs":["ent_ancestor_cb","ent_physics_cross_section","ent_physics_dcs"]}}],["ent_process",{"decl":["ENT_PROCESS_NONE","ENT_PROCESS_ELASTIC","ENT_PROCESS_DIS_NC","ENT_PROCESS_DIS_CC","ENT_PROCESS_INVERSE_MUON","ENT_PROCESS_INVERSE_TAU","ENT_PROCESS_GLASHOW_HADRON","ENT_N_PROCESSES"],"type":"enum","file":"ent.h","line":95,"lineto":112,"block":"ENT_PROCESS_NONE\nENT_PROCESS_ELASTIC\nENT_PROCESS_DIS_NC\nENT_PROCESS_DIS_CC\nENT_PROCESS_INVERSE_MUON\nENT_PROCESS_INVERSE_TAU\nENT_PROCESS_GLASHOW_HADRON\nENT_N_PROCESSES","tdef":null,"description":"  Neutrino interaction processes.","comments":"","fields":[{"type":"int","name":"ENT_PROCESS_NONE","comments":"<p>No specific process. </p>\n","value":-1},{"type":"int","name":"ENT_PROCESS_ELASTIC","comments":"<p>The elastic scattering on electrons, e.g. nu + e -&gt; nu + e. </p>\n","value":0},{"type":"int","name":"ENT_PROCESS_DIS_NC","comments":"<p>The neutral current DIS process. </p>\n","value":1},{"type":"int","name":"ENT_PROCESS_DIS_CC","comments":"<p>The charged current DIS process. </p>\n","value":2},{"type":"int","name":"ENT_PROCESS_INVERSE_MUON","comments":"<p>The inverse muon decay, e.g. nu_mu + e- -&gt; nu_e + mu-. </p>\n","value":3},{"type":"int","name":"ENT_PROCESS_INVERSE_TAU","comments":"<p>The inverse tau decay, e.g. nu_tau + e- -&gt; nu_e + tau-. </p>\n","value":4},{"type":"int","name":"ENT_PROCESS_GLASHOW_HADRON","comments":"<p>The resonant hadron(s) production in nu_e~ + e- -&gt; W -&gt; h. </p>\n","value":5},{"type":"int","name":"ENT_N_PROCESSES","comments":"<p>The resonant hadron(s) production in nu_e~ + e- -&gt; W -&gt; h. </p>\n","value":6}],"used":{"returns":[],"needs":["ent_physics_cross_section","ent_physics_dcs","ent_vertex"]}}],["ent_return",{"decl":["ENT_RETURN_SUCCESS","ENT_RETURN_BAD_ADDRESS","ENT_RETURN_DOMAIN_ERROR","ENT_RETURN_FORMAT_ERROR","ENT_RETURN_IO_ERROR","ENT_RETURN_MEMORY_ERROR","ENT_RETURN_PATH_ERROR","ENT_N_RETURNS"],"type":"enum","file":"ent.h","line":35,"lineto":52,"block":"ENT_RETURN_SUCCESS\nENT_RETURN_BAD_ADDRESS\nENT_RETURN_DOMAIN_ERROR\nENT_RETURN_FORMAT_ERROR\nENT_RETURN_IO_ERROR\nENT_RETURN_MEMORY_ERROR\nENT_RETURN_PATH_ERROR\nENT_N_RETURNS","tdef":null,"description":" Return codes used by ENT.","comments":"","fields":[{"type":"int","name":"ENT_RETURN_SUCCESS","comments":"<p>The operation succeeded. </p>\n","value":0},{"type":"int","name":"ENT_RETURN_BAD_ADDRESS","comments":"<p>A wrong pointer address was provided, e.g. NULL. </p>\n","value":1},{"type":"int","name":"ENT_RETURN_DOMAIN_ERROR","comments":"<p>Some input parameters are out of their validity range. </p>\n","value":2},{"type":"int","name":"ENT_RETURN_FORMAT_ERROR","comments":"<p>Some input file has a wrong format. </p>\n","value":3},{"type":"int","name":"ENT_RETURN_IO_ERROR","comments":"<p>Some read /write error occured. </p>\n","value":4},{"type":"int","name":"ENT_RETURN_MEMORY_ERROR","comments":"<p>Some memory couldn&#39;t be allocated. </p>\n","value":5},{"type":"int","name":"ENT_RETURN_PATH_ERROR","comments":"<p>Some file couldn&#39;t be found. </p>\n","value":6},{"type":"int","name":"ENT_N_RETURNS","comments":"<p>The number of return codes. </p>\n","value":7}],"used":{"returns":["ent_physics_create","ent_physics_cross_section","ent_physics_dcs","ent_physics_pdf","ent_transport","ent_vertex"],"needs":["ent_error_print","ent_error_string","ent_handler_cb"]}}],["ent_state",{"decl":["enum ent_pid pid","double energy","double distance","double grammage","double weight","double [3] position","double [3] direction"],"type":"struct","value":"ent_state","file":"ent.h","line":288,"lineto":303,"tdef":null,"description":" Data for a particle Monte-Carlo state.","comments":"<p>These are the data set required by <em>ENT</em> for describing a particle Monte-Carlo state. The user might implement his own data structure on top of it.</p>\n","fields":[{"type":"enum ent_pid","name":"pid","comments":"The particle type. \n"},{"type":"double","name":"energy","comments":"The particle energy, in GeV. \n"},{"type":"double","name":"distance","comments":"The total distance travelled by the particle, in m. \n"},{"type":"double","name":"grammage","comments":"The total grammage travelled by the particle, in kg/m<sup>2.</sup> \n"},{"type":"double","name":"weight","comments":"The Monte-Carlo weight. \n"},{"type":"double [3]","name":"position","comments":"The particle absolute position, in m. \n"},{"type":"double [3]","name":"direction","comments":"The particle momentum&#39;s direction. \n"}],"block":"enum ent_pid pid\ndouble energy\ndouble distance\ndouble grammage\ndouble weight\ndouble [3] position\ndouble [3] direction","used":{"returns":[],"needs":["ent_ancestor_cb","ent_density_cb","ent_medium_cb","ent_transport","ent_vertex"]}}]],"prefix":"include","groups":[["ent",["ent_transport","ent_vertex"]],["error",["ent_error_function","ent_error_handler_get","ent_error_handler_set","ent_error_print","ent_error_string"]],["physics",["ent_physics_create","ent_physics_cross_section","ent_physics_dcs","ent_physics_destroy","ent_physics_pdf"]]],"examples":[["example-physics.c","ex/v0.4/example-physics.html"],["example-transport.c","ex/v0.4/example-transport.html"],["example-vertex.c","ex/v0.4/example-vertex.html"]]}